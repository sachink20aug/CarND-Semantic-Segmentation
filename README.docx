Semantic Segmentation
Introduction
In this project, you'll label the pixels of a road in images using a Fully Convolutional Network (FCN).
Setup
GPU
main.py will check to make sure you are using GPU - if you don't have a GPU on your system, you can use AWS or another cloud computing platform.
Fully Connected Neural Network Architecture
  




Results at 50 epochs
 
 
 
 
Frameworks and Packages
Make sure you have the following is installed:
•	Python 3
•	TensorFlow
•	NumPy
•	SciPy
Dataset
Download the Kitti Road dataset from here. Extract the dataset in the data folder. This will create the folder data_road with all the training a test images.
Start
Implement
Implement the code in the main.py module indicated by the "TODO" comments. The comments indicated with "OPTIONAL" tag are not required to complete.
Run
Run the following command to run the project:
python main.py
Note If running this in Jupyter Notebook system messages, such as those regarding test status, may appear in the terminal rather than the notebook.
Submission
1.	Ensure you've passed all the unit tests.
2.	Ensure you pass all points on the rubric.
3.	Submit the following in a zip file.
•	helper.py
•	main.py
•	project_tests.py
•	Newest inference images from runs folder (all images from the most recent run)
Tips
•	The link for the frozen VGG16 model is hardcoded into helper.py. The model can be found here.
•	The model is not vanilla VGG16, but a fully convolutional version, which already contains the 1x1 convolutions to replace the fully connected layers. Please see this post for more information. A summary of additional points, follow.
•	The original FCN-8s was trained in stages. The authors later uploaded a version that was trained all at once to their GitHub repo. The version in the GitHub repo has one important difference: The outputs of pooling layers 3 and 4 are scaled before they are fed into the 1x1 convolutions. As a result, some students have found that the model learns much better with the scaling layers included. The model may not converge substantially faster, but may reach a higher IoU and accuracy.
•	When adding l2-regularization, setting a regularizer in the arguments of the tf.layers is not enough. Regularization loss terms must be manually added to your loss function. otherwise regularization is not implemented.
Using GitHub and Creating Effective READMEs
If you are unfamiliar with GitHub , Udacity has a brief GitHub tutorial to get you started. Udacity also provides a more detailed free course on git and GitHub.
To learn about REAMDE files and Markdown, Udacity provides a free course on READMEs, as well.
GitHub also provides a tutorial about creating Markdown files.

